<?php if (!defined('BASEPATH')) { exit('No direct script access allowed'); } class Estoque_model extends CI_Model { public function __construct() { parent::__construct(); } public function get($table, $fields, $where = '', $perpage = 0, $start = 0, $one = false, $array = 'array') { $this->db->select($fields); $this->db->from($table); $this->db->limit($perpage, $start); if ($where) { $this->db->where($where); } $query = $this->db->get(); $result = !$one ? $query->result() : $query->row(); return $result; } public function getProdutos($table, $fields, $where = '', $perpage = 0, $start = 0, $one = false, $array = 'array') { $this->db->select($fields); $this->db->from($table); $this->db->limit($perpage, $start); if ($where) { $this->db->where($where); } $this->db->order_by('idProdutos', 'desc'); $query = $this->db->get(); $result = !$one ? $query->result() : $query->row(); return $result; } public function getById($table, $field, $id) { $this->db->where($field, $id); $this->db->limit(1); return $this->db->get($table)->row(); } public function add($table, $data) { return $this->db->insert($table, $data); } public function edit($table, $data, $fieldID, $ID) { $this->db->where($fieldID, $ID); $this->db->update($table, $data); if ($this->db->affected_rows() >= 0) { return true; } return false; } public function delete($table, $fieldID, $ID) { $this->db->where($fieldID, $ID); $this->db->delete($table); if ($this->db->affected_rows() == '1') { return true; } return false; } public function count($table) { return $this->db->count_all($table); } public function autoCompleteProduto($q) { $this->db->select('*'); $this->db->limit(25); $this->db->like('codDeBarra', $q); $this->db->or_like('descricao', $q); $query = $this->db->get('produtos'); if ($query->num_rows() > 0) { foreach ($query->result_array() as $row) { $row_set[] = ['label' => $row['descricao'] . ' | PreÃ§o: R$ ' . $row['precoVenda'] . ' | Estoque: ' . $row['estoque'], 'estoque' => $row['estoque'], 'id' => $row['idProdutos'], 'preco' => $row['precoVenda']]; } echo json_encode($row_set); } } public function getEstoqueBaixo() { $this->db->select('*'); $this->db->where('estoque <= estoqueMinimo'); $this->db->where('estoqueMinimo > 0'); return $this->db->get('produtos')->result(); } public function getMovimentacoes($limit = 50) { $this->db->select('movimentacoes_estoque.*, produtos.descricao as produto_nome'); $this->db->from('movimentacoes_estoque'); $this->db->join('produtos', 'produtos.idProdutos = movimentacoes_estoque.produto_id'); $this->db->order_by('data_movimentacao', 'desc'); $this->db->limit($limit); return $this->db->get()->result(); } public function registrarMovimentacao($produto_id, $tipo, $quantidade, $observacao = '') { $data = [ 'produto_id' => $produto_id, 'tipo' => $tipo, 'quantidade' => $quantidade, 'data_movimentacao' => date('Y-m-d H:i:s'), 'observacao' => $observacao ]; return $this->db->insert('movimentacoes_estoque', $data); } }

